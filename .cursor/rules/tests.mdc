## Testes

- **Ferramentas:**
    - `jest` para cenários de teste e expectativas.
- **Execução:** Use o comando `yarn test`.
- **Estrutura:**
    - Mantenha os testes de integração na pasta `/test`, com a extensão `.test.ts`.
    - Testes de integração (HTTP, banco de dados, etc.) devem ficar em `/test/integration`.
    - Testes de unidade devem ficar em `/src` junto com a implementação concreta.
    - Toda classe deve estar coberta com testes de unidade.
- **Princípios:**
    - Siga o princípio *Arrange, Act, Assert* (ou *Given, When, Then*).
    - Testes devem ser independentes.
    - Use *mocks* para dependências como `Date` para garantir a repetibilidade.
    - Use TDD (Red green refactor) para toda implementação
- **Escopo dos Testes:**
    - **Endpoints HTTP:** Testes de integração para o fluxo principal e alternativo, focando em status code e mensagens de erro.
    - **Use Cases:** Teste os fluxos principais e pelo menos um alternativo que lance exceções. Use *stubs* para dependências externas.
    - **Domain:** Teste todas as regras de negócio e variações no nível de unidade.
- **Qualidade:**
    - Foque em testar um comportamento por teste.
    - Garanta cobertura total de testes para o código escrito.
    - Crie expectativas consistentes.
    - Encerre conexões com banco de dados ou mensageria após a execução dos testes.
    - Utilize `beforeEach` para inicializações.
