---
globs: backend/**/*.ts
alwaysApply: false
---
## Node.js/JavaScript/TypeScript

- **Linguagem:** Todo o código-fonte deve ser escrito em TypeScript.
- **Gerenciamento de Dependências:** Utilize `yarn` como ferramenta padrão.
- **Tipagem:**
    - Instale os `types` das bibliotecas (`@types/jest`).
    - Valide a tipagem antes de concluir uma tarefa.
    - Nunca utilize `any`; crie ou utilize tipos existentes.
- **Variáveis:**
    - Use `const` em vez de `let` sempre que possível.
    - Nunca use `var`.
- **Classes:** Declare propriedades como `private` ou `readonly`.
- **Arrays:** Prefira `find`, `filter`, `map`, e `reduce` em vez de `for` e `while`.
- **Assincronismo:** Use `async/await` para lidar com `Promises`.
- **Módulos:**
    - Use `import/export` em vez de `require/module.exports`.
    - Use `export default` para arquivos com uma única exportação.
    - Evite dependências circulares.
- **Estrutura de arquivos:** 
    - todo código da aplicação (regras de negócio e suas dependências) deve estar em `src/core` sob seu respectivo contexto. ex: `src/core/user`
        - Dentro de cada contexto os arquivos deverão ser dividos nas camadas: 
            - `domain` (regras de negócio independentes - não devem depender de nada das outras camadas) ex: Entidades, Value Objects, Serviço de domínio
            - `application` (orquestram os objetos de domínio) ex: casos de uso e serviços de aplicação. Trafegam apenas DTOs (tanto entrada quanto saída)
            - `infra` (fazem a comunicação com recursos externos). ex: implementação de repository, adapter para http client 
    - todo código referente ao framework deve estar em `src/modules` sob seu respectivo contexto. ex: `src/modules/user.module.ts`
        - Seguem a estrutura e padrão de nomenclatura no nestjs.
    - Evite misturar conceitos. ex: entidade do domínio é diferente de entidade do ORM
    - Exemplo completo de estrutura para backend:    
    ```
    backend
    |-- api
        |-- src
            |-- core
                |--[context]
                    |-- domain
                    |-- application
                    |-- infra
            |-- modules
                |--[context]
                    |--[context].module.ts
                    |--[context].controller.ts 
    ```
